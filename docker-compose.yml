# # version: "3.8"

# # services:

# #   # Certbot for generating SSL certificates (manual configuration needed)
# #   # certbot:
# #   #   image: certbot/certbot
# #   #   restart: unless-stopped
# #   #   volumes:
# #   #     - certbot-etc:/etc/letsencrypt
# #   #     - certbot-var:/var/lib/letsencrypt
# #   #   # Comment out the original command with Cloudflare DNS challenge
# #   #   # command: [ "/bin/sh", "-c", "trap exit TERM; while :; do certbot certonly --dns-cloudflare --dns-cloudflare-credentials /credentials/cloudflare.ini -d your.domain.com; sleep 12h & wait $${!}; done;" ]
# #   #   # You'll need to replace the commented command with a manual certificate generation using the `certbot certonly` command with appropriate flags for your DNS provider's challenge type. Refer to the certbot documentation for details: https://eff-certbot.readthedocs.io/
# #   #   depends_on:
# #   #     - nginx
# version: "3.8"

# services:
#   # Nginx reverse proxy (uses certificates generated by certbot)
#   nginx:
#     image: nginx:latest
#     restart: unless-stopped
#     ports:
#       - "80:80"
#     volumes:
#       - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro  # Mount your nginx configuration
#       - certbot-etc:/etc/letsencrypt  # Mount certificates from certbot
#     depends_on:
#       - frontend
#       - backend

#   # Frontend service
#   frontend:
#     build: 
#       context: ./frontend
#       dockerfile: Dockerfile
#     restart: unless-stopped
#     # ports:
#       # - "5173:5173"  # Adjust the port if needed
#     depends_on:
#       - backend
#       - postgresDB

#   # Backend service
#   backend:
#     build: 
#       context: ./backend
#       dockerfile: Dockerfile  # Replace with the path to your backend application
#     restart: unless-stopped
#     environment:
#       # Add environment variables your backend application needs
#       DATABASE_URL: postgres://postgres:3130DonX@postgresDB:5432/hng11-devops
#     depends_on:
#       - postgresDB


#   # PostgreSQL database
#   postgresDB:
#     image: postgres:latest
#     restart: unless-stopped
#     environment:
#       POSTGRES_PASSWORD: 3130DonX  # Set a strong password
#       POSTGRES_USER: postgres
#       POSTGRES_DB: hng11-devops  # Adjust the database name
#       PGDATA: var/lib/postgresql/data
#     volumes:
#       - postgres-data:/var/lib/postgresql/data  # Persistent storage for database
#     ports:
#       - "5332:5432"
#     healthcheck:
#       test: [ "CMD-SHELL", "pg_isready -d postgres postgres" ]
#       interval: 30s
#       timeout: 10s
#       retries: 5

#   # Adminer for database management
#   adminer:
#     image: adminer:latest
#     restart: unless-stopped
#     ports:
#       - "8080:8080"

#   proxy-manager:
#     image: jc21/nginx-proxy-manager:latest
#     restart: unless-stopped
#     ports:
#       - '8090:81'
#     volumes:
#       - ./proxy/data:/data
#       - ./proxy/letsencrypt:/etc/letsencrypt
#     depends_on:
#       - nginx

  

# volumes:
#   certbot-etc:
#   postgres-data:

version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args: 
        - VITE_API_URL=http://localhost:8000
    ports:
      - "3000:80"
    # networks:
    #   - webnet
  backend:
    build:
      context: ./backend
    ports:
      - "8001:8001"
    environment:

      - DATABASE_URL=postgresql://postgres:3130DonX@db:5432/hng11-devops
      
    depends_on:
      - db
    # networks:
    #   - webnet
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 3130DonX
      POSTGRES_DB: hng11-devops
    volumes:
      - pgdata:/var/lib/postgresql/data
    # networks:
    #   - webnet
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    # networks:
    #   - webnet
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    volumes:
      - data:/data
      - letsencrypt:/etc/letsencrypt
    # networks:
    #   - webnet
volumes:
  pgdata:
  data:
  letsencrypt:
networks:
  webnet:

